{"ast":null,"code":"var _jsxFileName = \"/home/dev/Documents/bugzilla/client/src/auth/Login.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSnackbar } from \"react-simple-snackbar\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { options } from \"../helpers/options\";\nimport { signInUser } from \"../redux/actions/userActions\";\nimport { Header, Spinner } from \"../components\";\nimport { LoginStyles } from \"../assets/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formik = useFormik({\n  initialValues: {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConfirmation: \"\",\n    role: \"\"\n  },\n  validationSchema: yup.object({\n    name: yup.string().required(\"Name is Required\"),\n    email: yup.string().email(\"Invalid Email Address\").required(\"Email is required\"),\n    password: yup.string().required(\"Password is required\").min(5, \"Length should be greater than 5\"),\n    passwordConfirmation: yup.string().oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\n  }),\n  onSubmit: values => {\n    setClicked(true);\n    setState({ ...state,\n      name: values.name,\n      email: values.email,\n      password: values.password,\n      passwordConfirmation: values.passwordConfirmation,\n      role: roleRef.current.value\n    });\n  }\n});\n\nconst Login = () => {\n  _s();\n\n  console.count(\"LOGIN\");\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n  const [openSnackbar] = useSnackbar(options);\n  const user = localStorage.getItem(\"profile\");\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const url = process.env.REACT_APP_SESSION_URL;\n\n  const fetchApi = e => {\n    e.preventDefault();\n    setLoading(true);\n    dispatch(signInUser(url, {\n      email: emailRef.current.value,\n      password: passwordRef.current.value\n    }, setLoading, openSnackbar));\n  };\n\n  if (user) navigate(\"/\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      className: LoginStyles.loginForm,\n      onSubmit: fetchApi,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Email\",\n        ref: emailRef,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\",\n        ref: passwordRef,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: LoginStyles.submitButton,\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"BsKXCpd0aDIDkG1NfndVQDUYZiI=\", false, function () {\n  return [useSnackbar, useDispatch, useNavigate];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useState","useRef","useDispatch","useNavigate","useSnackbar","useFormik","yup","options","signInUser","Header","Spinner","LoginStyles","formik","initialValues","name","email","password","passwordConfirmation","role","validationSchema","object","string","required","min","oneOf","ref","onSubmit","values","setClicked","setState","state","roleRef","current","value","Login","console","count","emailRef","passwordRef","openSnackbar","user","localStorage","getItem","loading","setLoading","dispatch","navigate","url","process","env","REACT_APP_SESSION_URL","fetchApi","e","preventDefault","loginForm","submitButton"],"sources":["/home/dev/Documents/bugzilla/client/src/auth/Login.js"],"sourcesContent":["import { useState, useRef } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useSnackbar } from \"react-simple-snackbar\"\nimport { useFormik } from \"formik\"\nimport * as yup from \"yup\"\n\nimport { options } from \"../helpers/options\"\nimport { signInUser } from \"../redux/actions/userActions\"\nimport { Header, Spinner } from \"../components\"\n\nimport { LoginStyles } from \"../assets/index\"\n\nconst formik = useFormik({\n  initialValues: {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConfirmation: \"\",\n    role: \"\",\n  },\n  validationSchema: yup.object({\n    name: yup.string().required(\"Name is Required\"),\n    email: yup\n      .string()\n      .email(\"Invalid Email Address\")\n      .required(\"Email is required\"),\n    password: yup\n      .string()\n      .required(\"Password is required\")\n      .min(5, \"Length should be greater than 5\"),\n    passwordConfirmation: yup\n      .string()\n      .oneOf([yup.ref(\"password\"), null], \"Passwords must match\"),\n  }),\n  onSubmit: (values) => {\n    setClicked(true)\n    setState({\n      ...state,\n      name: values.name,\n      email: values.email,\n      password: values.password,\n      passwordConfirmation: values.passwordConfirmation,\n      role: roleRef.current.value,\n    })\n  },\n})\n\nconst Login = () => {\n  console.count(\"LOGIN\")\n  const emailRef = useRef(null)\n  const passwordRef = useRef(null)\n  const [openSnackbar] = useSnackbar(options)\n  const user = localStorage.getItem(\"profile\")\n  const [loading, setLoading] = useState(false)\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const url = process.env.REACT_APP_SESSION_URL\n  const fetchApi = (e) => {\n    e.preventDefault()\n    setLoading(true)\n    dispatch(\n      signInUser(\n        url,\n        {\n          email: emailRef.current.value,\n          password: passwordRef.current.value,\n        },\n        setLoading,\n        openSnackbar\n      )\n    )\n  }\n  if (user) navigate(\"/\")\n  return (\n    <div>\n      <Header />\n      {loading ? (\n        <Spinner />\n      ) : (\n        <form className={LoginStyles.loginForm} onSubmit={fetchApi}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            ref={emailRef}\n            required\n          ></input>\n\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            ref={passwordRef}\n            required\n          ></input>\n\n          <button className={LoginStyles.submitButton} type=\"submit\">\n            Submit\n          </button>\n        </form>\n      )}\n    </div>\n  )\n}\n\nexport default Login\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}